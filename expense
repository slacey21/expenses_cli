#!/usr/bin/env node

const { Client } = require('pg');
const PROCESS = require('process');
const READLINE = require('readline');

function logAndExit(error) {
  console.log(error);
  PROCESS.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses_cli' });
  }

  async listExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let response = await this.client.query('SELECT * FROM expenses ORDER BY created_on')
                                    .catch(err => logAndExit(err));
    
    this.displayCount(response);
    this.displayExpenses(response);
    if (response.rowCount > 1) {
      this.displayTotal(response);
    }

    await this.client.end().catch(err => logAndExit(err));
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let date = new Date().toLocaleDateString();

    let queryText = 'INSERT INTO expenses (created_on, amount, memo) VALUES ($1, $2, $3)';
    let values = [date, amount, memo];
    
    await this.client.query(queryText, values).catch(err => logAndExit(err));
    
    await this.client.end().catch(err => logAndExit(err));
  }

  async searchExpenses(term) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let queryText = "SELECT * FROM expenses WHERE memo ILIKE $1";
    let values = ['%' + term + '%'];
    
    let response = await this.client.query(queryText, values)
                                    .catch(err => logAndExit(err));
    
    this.displayCount(response);
    this.displayExpenses(response);
    if (response.rowCount > 1) {
      this.displayTotal(response);
    }
    
    await this.client.end().catch(err => logAndExit(err));
  }

  async deleteExpense(id) {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    let searchQueryText = 'SELECT * FROM expenses WHERE id = $1';
    
    let response = await this.client.query(searchQueryText, [id])
                                    .catch(err => logAndExit(err));

    if (response.rowCount === 1) {
      let deleteQueryText = 'DELETE FROM expenses WHERE id = $1';
      await this.client.query(deleteQueryText, [id])
                      .catch(err => logAndExit(err));
      
      console.log('The following expense has been deleted:')
      this.displayExpenses(response);

    } else {
      console.log(`There is no expense with the id '#${id}'.`);
    } 

    await this.client.end().catch(err => logAndExit(err));
  }

  async clearExpenses() {
    await this.client.connect().catch(err => logAndExit(err));
    await this.setupSchema().catch(err => logAndExit(err));

    await this.client.query('DELETE FROM expenses').catch(err => logAndExit(err));
      
    console.log('All expenses have been deleted.');
  
    await this.client.end().catch(err => logAndExit(err));
  }

  async setupSchema() {
    let queryText = `SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'
    AND table_name = 'doesnotexist'`;
    
    let response = await this.client.query(queryText).catch(err => logAndExit(err));
    
    if (response.rows[0].count === 0) {
      let createQuery = `CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6, 2) NOT NULL,
        memo text NOT NULL,
        created_on DATE NOT NULL)`;
      
      await this.client.query(createQuery).catch(err => logAndExit(err));
    }
  }

  displayExpenses(res) {
    res.rows.forEach(tuple => {
      let columns = [
        `${tuple.id}`.padStart(3),
        tuple.created_on.toDateString().padStart(10),
        tuple.amount.padStart(12),
        tuple.memo
      ];
      
      console.log(columns.join(' | '))
    });
  }

  displayCount(res) {
    if (res.rowCount === 0) {
      console.log('There are no expenses.');
    } else if (res.rowCount === 1) {
      console.log('There is 1 expense.');
    } else {
      console.log(`There are ${res.rowCount} expenses.`);
    }
  }

  displayTotal(res) {
    let total = res.rows.reduce((sum, tuple) => {
      return sum + Number(tuple.amount);
    }, 0);
    
    total = String(total.toFixed(2));

    console.log('-'.repeat(50));
    console.log(`Total ${String(total).padStart(30, ' ')}${' '.repeat(14)}`);
  }
}

class CLI {
  constructor() {
    this.application = new ExpenseData();
  }

  static HELP() {
    return `
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field`;
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];
    this.application.setupSchema();

    if (command === 'help') {
      CLI.displayHelp();
    } else if (command === 'list') {
      this.application.listExpenses();
    } else if (command === 'add') {
      let amount = args[3];
      let memo = args[4];
      
      if (amount && memo) {
        this.application.addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.');
      }
    } else if (command === 'search') {
      if (args[3]) {
        this.application.searchExpenses(args[3]);
      } else {
        console.log('You must provide a search term');
      }
    } else if (command === 'delete') {
      this.application.deleteExpense(args[3]);
    } else if (command === 'clear') {
      let rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      let questionText = 'This will remove all expenses. Are you sure? (y/n) ';
      rl.question(questionText, answer => {
        if (answer === 'y') {
          this.application.clearExpenses();
        }
        rl.close();
      });
    }
  }
}

let args = PROCESS.argv;
let cli = new CLI();
cli.run(args);
